Update(Function("findUserByEmail"), {
  "body":Query(
    Lambda(
      ["auth0_email"],
      Let(
        {
          users: Map(
            Paginate(Match(Index("findUserByEmail"), Var("auth0_email"))),
            Lambda("users", Get(Var("users")))
          )
        },
        Select(["data"], Var("users"), false)
      )
    )
  )
});

Update(Function("findPurveyorByDatocmsId"), {
  "body":Query(
    Lambda(
      ["datocms_id"],
      Let(
        {
          purveyors: Map(
            Paginate(Match(Index("findPurveyorByDatocmsId"), Var("datocms_id"))),
            Lambda("purveyors", Get(Var("purveyors")))
          )
        },
        Select(["data"], Var("purveyors"), false)
      )
    )
  )
});

Update(Function("favoritePurveyor"), {
  "body":Query(
    Lambda(
      ["auth0_email", "datocms_id"],
      Let(
        {
          user: Let(
            {
              users: Map(
                Paginate(Match(Index("findUserByEmail"), Var("auth0_email"))),
                Lambda("users", Get(Var("users")))
              )
            },
            Select([0], Var("users"), false)
          ),
          purveyor: Let(
            {
              purveyors: Map(
                Paginate(
                  Match(Index("findPurveyorByDatocmsId"), Var("datocms_id"))
                ),
                Lambda("purveyors", Get(Var("purveyors")))
              )
            },
            Select([0], Var("purveyors"), false)
          ),
          favoritePurveyorSelected: Let(
            {
              favoritePurveyorRefs: Paginate(
                Match(
                  Index("findFavoritePurveyorByUser"),
                  Select("ref", Var("user"), false)
                )
              ),
              purveyorRefs: Map(
                Var("favoritePurveyorRefs"),
                Lambda(
                  ["ref"],
                  Let(
                    {
                      purveyor: Get(
                        Select(["data", "purveyorId"], Get(Var("ref")), false)
                      )
                    },
                    {
                      favoritepurveyorRef: Get(Var("ref")),
                      purveyor: Var("purveyor")
                    }
                  )
                )
              ),
              favoritePurveyorSelected: Let(
                {
                  favoritePurveyorSelected: Filter(
                    Var("purveyorRefs"),
                    Lambda(
                      ["favoritePurveyor"],
                      Equals(
                        Var("datocms_id"),
                        Select(
                          ["purveyor", "data", "datocms_id"],
                          Var("favoritePurveyor"),
                          false
                        )
                      )
                    )
                  )
                },
                Select([0], Var("favoritePurveyorSelected"), false)
              ),
              favoritePurveyorStatus: If(
                IsNull(Var("favoritePurveyorSelected")),
                Create(Collection("user_favorite_purveyors"), {
                  data: {
                    userId: Select(["ref"], Var("user"), false),
                    purveyorId: Ref(
                      Collection("purveyors"),
                      Select(["ref", "id"], Var("purveyor"), false)
                    )
                  }
                }),
                Delete(
                  Ref(
                    Collection("user_favorite_purveyors"),
                    Select(
                      ["favoritePurveyorRef", "ref", "id"],
                      Var("favoritePurveyorSelected"),
                      false
                    )
                  )
                )
              )
            },
            Var("favoritePurveyorSelected")
          ),
          favoritePurveyorsUpdated: Let(
            {
              favoritePurveyorRefs: Paginate(
                Match(
                  Index("findFavoritePurveyorByUser"),
                  Select("ref", Var("user"), false)
                )
              ),
              purveyors: Map(
                Var("favoritePurveyorRefs"),
                Lambda(
                  ["ref"],
                  Let(
                    {
                      purveyor: Get(
                        Select(["data", "purveyorId"], Get(Var("ref")), false)
                      )
                    },
                    Select("data", Var("purveyor"), false)
                  )
                )
              )
            },
            Select("data", Var("purveyors"), false)
          )
        },
        {
          message: If(
            IsNull(Var("favoritePurveyorSelected")),
            "favorited",
            "unfavorited"
          ),
          favoritePurveyors: Var("favoritePurveyorsUpdated")
        }
      )
    )
  )
});

Update(Function("findRecipeByDatocmsId"), {
  "body":Query(
    Lambda(
      ["datocms_id"],
      Let(
        {
          recipes: Map(
            Paginate(Match(Index("findRecipeByDatocmsId"), Var("datocms_id"))),
            Lambda("recipes", Get(Var("recipes")))
          )
        },
        Select(["data"], Var("recipes"), false)
      )
    )
  )
});

Update(Function("favoriteRecipe"), {
  "body":Query(
    Lambda(
      ["auth0_email", "datocms_id"],
      Let(
        {
          user: Let(
            {
              users: Map(
                Paginate(Match(Index("findUserByEmail"), Var("auth0_email"))),
                Lambda("users", Get(Var("users")))
              )
            },
            Select([0], Var("users"), false)
          ),
          recipe: Let(
            {
              recipes: Map(
                Paginate(
                  Match(Index("findRecipeByDatocmsId"), Var("datocms_id"))
                ),
                Lambda("recipes", Get(Var("recipes")))
              )
            },
            Select([0], Var("recipes"), false)
          ),
          favoriteRecipeSelected: Let(
            {
              favoriteRecipeRefs: Paginate(
                Match(
                  Index("findFavoriteRecipeByUser"),
                  Select("ref", Var("user"), false)
                )
              ),
              recipeRefs: Map(
                Var("favoriteRecipeRefs"),
                Lambda(
                  ["ref"],
                  Let(
                    {
                      recipe: Get(
                        Select(["data", "recipeId"], Get(Var("ref")), false)
                      )
                    },
                    {
                      favoriterecipeRef: Get(Var("ref")),
                      recipe: Var("recipe")
                    }
                  )
                )
              ),
              favoriteRecipeSelected: Let(
                {
                  favoriteRecipeSelected: Filter(
                    Var("recipeRefs"),
                    Lambda(
                      ["favoriteRecipe"],
                      Equals(
                        Var("datocms_id"),
                        Select(
                          ["recipe", "data", "datocms_id"],
                          Var("favoriteRecipe"),
                          false
                        )
                      )
                    )
                  )
                },
                Select([0], Var("favoriteRecipeSelected"), false)
              ),
              favoriteRecipeStatus: If(
                IsNull(Var("favoriteRecipeSelected")),
                Create(Collection("user_favorite_recipes"), {
                  data: {
                    userId: Select(["ref"], Var("user"), false),
                    recipeId: Ref(
                      Collection("recipes"),
                      Select(["ref", "id"], Var("recipe"), false)
                    )
                  }
                }),
                Delete(
                  Ref(
                    Collection("user_favorite_recipes"),
                    Select(
                      ["favoriteRecipeRef", "ref", "id"],
                      Var("favoriteRecipeSelected"),
                      false
                    )
                  )
                )
              )
            },
            Var("favoriteRecipeSelected")
          ),
          favoriteRecipesUpdated: Let(
            {
              favoriteRecipeRefs: Paginate(
                Match(
                  Index("findFavoriteRecipeByUser"),
                  Select("ref", Var("user"), false)
                )
              ),
              recipes: Map(
                Var("favoriteRecipeRefs"),
                Lambda(
                  ["ref"],
                  Let(
                    {
                      recipe: Get(
                        Select(["data", "recipeId"], Get(Var("ref")), false)
                      )
                    },
                    Select("data", Var("recipe"), false)
                  )
                )
              )
            },
            Select("data", Var("recipes"), false)
          )
        },
        {
          message: If(
            IsNull(Var("favoriteRecipeSelected")),
            "favorited",
            "unfavorited"
          ),
          favoriteRecipes: Var("favoriteRecipesUpdated")
        }
      )
    )
  )
});

Update(Function("updateRecipe"), {
  "body": Query(
    Lambda(
      [
        "datocms_id",
        "datocms_main_category_id",
        "datocms_sub_categories",
        "datocms_tags",
        "datocms_methods",
        "datocms_name",
        "datocms_featured_image_url",
        "datocms_duration",
        "datocms_difficulty",
        "datocms_taste",
        "datocms_summary",
        "datocms_authors_tip",
        "datocms_is_trending"
      ],
      Let(
        {
          recipes: Map(
            Paginate(Match(Index("findRecipeByDatocmsId"), Var("datocms_id"))),
            Lambda("recipes", Get(Var("recipes")))
          )
        },
        Update(Select("ref", Select([0], Var("recipes"), false), false), {
          data: {
            datocms_main_category_id: Var("datocms_main_category_id"),
            datocms_sub_categories: Var("datocms_sub_categories"),
            datocms_tags: Var("datocms_tags"),
            datocms_methods: Var("datocms_methods"),
            datocms_name: Var("datocms_name"),
            datocms_featured_image_url: Var("datocms_featured_image_url"),
            datocms_duration: Var("datocms_duration"),
            datocms_difficulty: Var("datocms_difficulty"),
            datocms_taste: Var("datocms_taste"),
            datocms_summary: Var("datocms_summary"),
            datocms_authors_tip: Var("datocms_authors_tip"),
            datocms_is_trending: Var("datocms_is_trending")
          }
        })
      )
    )
  )
});
